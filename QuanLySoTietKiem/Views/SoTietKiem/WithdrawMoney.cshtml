@model Models.RutTien.WithdrawMoneyViewModel
@{
  ViewData["Title"] = "Rút tiền";
  Layout = "~/Views/Shared/_UserLayout.cshtml";
}

<style>
  .card {
    transition: all 0.3s ease;
  }

  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2) !important;
  }

  .alert {
    animation: slideIn 0.5s ease-out;
  }

  .btn {
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .btn:hover {
    transform: translateY(-2px);
  }

  .btn::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba(255, 255, 255, 0.5);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%);
    transform-origin: 50% 50%;
  }

  .btn:focus:not(:active)::after {
    animation: ripple 1s ease-out;
  }




  .form-control:focus {
    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
    border-color: #28a745;
  }

  .quick-amount {
    transition: all 0.3s ease;
    min-width: 150px;
  }

  .quick-amount:hover {
    transform: translateY(-2px);
  }

  .quick-amount.active {
    background-color: #198754;
    color: white;
    border-color: #198754;
  }
</style>

<div class="container mt-5 animate__animated animate__fadeIn">
  <div class="card shadow rounded-lg">
    <div class="card-header bg-success text-white">
      <div class="d-flex align-items-center justify-content-between">
        <i class="bi bi-cash-stack me-2"></i>
        <div class="d-flex align-items-center flex-grow-1 justify-content-center">
          <h3 class="mb-0">Rút Tiền</h3>
        </div>
      </div>
    </div>

    @if (!Model.TrangThai)
    {
      <div class="alert alert-warning m-3 rounded-lg">
        <i class="bi bi-exclamation-triangle me-2"></i>
        <strong>Thông báo:</strong> Sổ tiết kiệm này đã đóng
      </div>
    }

    @if (DateTime.Now.Date >= Model.NgayDaoHan.Date)
    {
      <a asp-action="XuLyDaoHan" asp-route-maSoTietKiem="@Model.MaSoTietKiem" class="btn btn-primary m-3 d-block">
        Xử lý đáo hạn
      </a>
    }

    <div class="card-body">
      <div class="alert alert-info shadow-sm rounded-lg">
        <h5 class="border-bottom pb-2">Thông tin rút tiền:</h5>
        <ul class="list-unstyled">
          <li><strong>Mã sổ tiết kiệm:</strong> @Model.MaSoTietKiem</li>
          <li><strong>Tên khách hàng:</strong>
            @if (User.Identity.IsAuthenticated)
            {
              @User.Identity.Name
            }
            else
            {
              <a asp-area="Identity" asp-page="/Account/Login" class="btn btn-primary">
                Đăng nhập
              </a>
            }
          </li>
          <li><strong>Số dư hiện tại:</strong> @Model.SoDuHienTai.ToString("N0") VNĐ</li>
          @* <li><strong>Ngày mở sổ:</strong> @Model.NgayMoSo.ToString("dd/MM/yyyy")</li> *@
          @* <li><strong>Ngày đáo hạn:</strong> @Model.NgayDaoHan.ToString("dd/MM/yyyy")</li> *@
          <li><strong>Lãi suất:</strong> @Model.LaiSuatKyHan.ToString("P1")</li>
          @* <li><strong>Lãi suất áp dụng:</strong> @ViewBag.LaiSuatApDung%/năm</li> *@
          <li><strong>Tiền lãi:</strong> @ViewBag.TienLai.ToString("N0") VNĐ</li>
          <li><strong>Tổng tiền nhận được (gốc + lãi):</strong> @ViewBag.TongTienNhanDuoc.ToString("N0") VNĐ</li>
        </ul>

        @if (DateTime.Now < Model.NgayDaoHan)
        {
          <div class="alert alert-danger mt-3 rounded-lg animate__animated animate__headShake">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <strong>Lưu ý:</strong> Rút tiền trước hạn sẽ được áp dụng lãi suất thấp hơn
          </div>
        }
      </div>

      @if (Model.TrangThai)
      {
        <form asp-action="WithdrawMoney" method="post" class="mt-4">
          @Html.AntiForgeryToken()
          <input type="hidden" asp-for="MaSoTietKiem" />

          <div class="mb-4">
            <label asp-for="SoTienRut" class="form-label fw-bold text-success">
              <i class="bi bi-calculator"></i> Số tiền bạn muốn rút
            </label>
            <div class="input-group">
              <span class="input-group-text bg-success text-white">
                <i class="bi bi-currency-dollar"></i>
              </span>
              <input id="displayAmount" class="form-control" placeholder="0" type="text"
                data-max="@ViewBag.TongTienNhanDuoc" />
            </div>
            <div class="mt-3 d-flex gap-2 flex-wrap">
              <button type="button" class="btn btn-outline-success quick-amount" data-amount="100000">
                100,000 VNĐ
              </button>
              <button type="button" class="btn btn-outline-success quick-amount" data-amount="1000000">
                1,000,000 VNĐ
              </button>
              <button type="button" class="btn btn-outline-success quick-amount" data-amount="10000000">
                10,000,000 VNĐ
              </button>
            </div>
            <input type="hidden" asp-for="SoTienRut" id="actualAmount" />
            <div class="invalid-feedback" id="amountError">
              Số tiền rút không được vượt quá số dư hiện có
            </div>
            <div class="invalid-feedback" id="formatError">
              Vui lòng nhập số tiền hợp lệ
            </div>
            <span asp-validation-for="SoTienRut" class="text-danger"></span>
          </div>

          <div class="mb-3 d-flex gap-2 justify-content-center">
            <button type="submit" class="btn btn-success btn-lg">
              <i class="bi bi-cash me-2"></i>Xác nhận rút tiền
            </button>
            <a asp-action="Index" class="btn btn-primary btn-lg">
              <i class="bi bi-arrow-left me-2"></i>Quay lại
            </a>
          </div>
        </form>
      }
      else
      {
        <div class="mb-3 d-flex gap-2 justify-content-center mt-4">
          <a asp-action="DeleteSavingsAccount" asp-route-id="@Model.MaSoTietKiem" method="post"
            class="btn btn-danger btn-lg" onclick="return confirm('Bạn có chắc chắn muốn xóa sổ tiết kiệm này?')">
            <i class="bi bi-trash me-2"></i>Xóa sổ
          </a>
          <a asp-action="Index" class="btn btn-primary btn-lg">
            <i class="bi bi-arrow-left me-2"></i>Quay lại
          </a>
        </div>
      }
    </div>
  </div>
</div>

@section Scripts {
  @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
  }
  <script>
    const displayInput = document.getElementById('displayAmount');
    const actualInput = document.getElementById('actualAmount');
    const submitButton = document.querySelector('button[type="submit"]');
    const errorDiv = document.getElementById('amountError');
    const formatErrorDiv = document.getElementById('formatError');
    const quickAmountButtons = document.querySelectorAll('.quick-amount');

    // Xử lý sự kiện click cho các nút chọn nhanh
    quickAmountButtons.forEach(button => {
      button.addEventListener('click', function () {
        const amount = parseInt(this.dataset.amount);
        const max = parseInt(displayInput.dataset.max);

        if (amount > max) {
          displayInput.classList.add('is-invalid');
          errorDiv.style.display = 'block';
          formatErrorDiv.style.display = 'none';
          submitButton.disabled = true;
          return;
        }

        // Cập nhật giá trị vào input
        actualInput.value = amount;
        displayInput.value = amount.toLocaleString('vi-VN');

        // Reset trạng thái
        displayInput.classList.remove('is-invalid');
        errorDiv.style.display = 'none';
        formatErrorDiv.style.display = 'none';
        submitButton.disabled = false;

        // Highlight nút được chọn
        quickAmountButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
      });
    });

    displayInput.addEventListener('input', function (e) {
      // Reset highlight của các nút khi người dùng nhập tay
      quickAmountButtons.forEach(btn => btn.classList.remove('active'));

      // Xóa tất cả ký tự không phải số
      let value = this.value.replace(/[^\d]/g, '');

      // Chuyển đổi thành số
      let number = parseInt(value) || 0;

      // Giới hạn theo giá trị max
      let max = parseInt(this.dataset.max);

      // Kiểm tra và hiển thị thông báo
      if (number > max) {
        this.classList.add('is-invalid');
        errorDiv.style.display = 'block';
        formatErrorDiv.style.display = 'none';
        submitButton.disabled = true;
      } else if (number === 0) {
        this.classList.add('is-invalid');
        formatErrorDiv.style.display = 'block';
        errorDiv.style.display = 'none';
        submitButton.disabled = true;
      } else {
        this.classList.remove('is-invalid');
        errorDiv.style.display = 'none';
        formatErrorDiv.style.display = 'none';
        submitButton.disabled = false;
      }

      // Cập nhật giá trị thực tế (không có dấu phân cách)
      actualInput.value = number;

      // Định dạng số với dấu phân cách hàng nghìn cho hiển thị
      this.value = number.toLocaleString('vi-VN');
    });

    // Xử lý form submit
    document.querySelector('form').addEventListener('submit', function (e) {
      let number = parseInt(actualInput.value) || 0;
      let max = parseInt(displayInput.dataset.max);

      if (number === 0) {
        e.preventDefault();
        displayInput.classList.add('is-invalid');
        formatErrorDiv.style.display = 'block';
        return false;
      }

      if (number > max) {
        e.preventDefault();
        displayInput.classList.add('is-invalid');
        errorDiv.style.display = 'block';
        formatErrorDiv.style.display = 'none';
        return false;
      }
    });
  </script>
}